"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(rsc)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(rsc)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\nconst _excluded = [\n    \"block\",\n    \"list\",\n    \"listItem\",\n    \"marks\",\n    \"types\"\n], _excluded2 = [\n    \"listItem\"\n], _excluded3 = [\n    \"_key\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _objectWithoutProperties(e, t) {\n    if (null == e) return {};\n    var o, r, i = _objectWithoutPropertiesLoose(e, t);\n    if (Object.getOwnPropertySymbols) {\n        var s = Object.getOwnPropertySymbols(e);\n        for(r = 0; r < s.length; r++)o = s[r], t.includes(o) || ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n    }\n    return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n    if (null == r) return {};\n    var t = {};\n    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {\n        if (e.includes(n)) continue;\n        t[n] = r[n];\n    }\n    return t;\n}\n\n\n\n\nconst defaultLists = {\n    number: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", {\n            children\n        }),\n    bullet: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n            children\n        })\n}, DefaultListItem = ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n        children\n    }), link = ({ children, value })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n        href: value?.href,\n        children\n    }), underlineStyle = {\n    textDecoration: \"underline\"\n}, defaultMarks = {\n    em: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", {\n            children\n        }),\n    strong: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n            children\n        }),\n    code: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n            children\n        }),\n    underline: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            style: underlineStyle,\n            children\n        }),\n    \"strike-through\": ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", {\n            children\n        }),\n    link\n}, getTemplate = (type, prop)=>`[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`, unknownTypeWarning = (typeName)=>getTemplate(`block type \"${typeName}\"`, \"types\"), unknownMarkWarning = (markType)=>getTemplate(`mark type \"${markType}\"`, \"marks\"), unknownBlockStyleWarning = (blockStyle)=>getTemplate(`block style \"${blockStyle}\"`, \"block\"), unknownListStyleWarning = (listStyle)=>getTemplate(`list style \"${listStyle}\"`, \"list\"), unknownListItemStyleWarning = (listStyle)=>getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n    console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n}, DefaultUnknownType = ({ value, isInline })=>{\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        style: hidden,\n        children: warning\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        style: hidden,\n        children: warning\n    });\n}, DefaultUnknownMark = ({ markType, children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        className: `unknown__pt__mark__${markType}`,\n        children\n    }), DefaultUnknownBlockStyle = ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n        children\n    }), DefaultUnknownList = ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n        children\n    }), DefaultUnknownListItem = ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n        children\n    }), DefaultHardBreak = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}), defaultBlockStyles = {\n    normal: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n            children\n        }),\n    blockquote: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", {\n            children\n        }),\n    h1: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", {\n            children\n        }),\n    h2: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", {\n            children\n        }),\n    h3: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n            children\n        }),\n    h4: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", {\n            children\n        }),\n    h5: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", {\n            children\n        }),\n    h6: ({ children })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", {\n            children\n        })\n}, defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n};\nfunction mergeComponents(parent, overrides) {\n    const { block, list, listItem, marks, types } = overrides, rest = _objectWithoutProperties(overrides, _excluded);\n    return _objectSpread(_objectSpread({}, parent), {}, {\n        block: mergeDeeply(parent, overrides, \"block\"),\n        list: mergeDeeply(parent, overrides, \"list\"),\n        listItem: mergeDeeply(parent, overrides, \"listItem\"),\n        marks: mergeDeeply(parent, overrides, \"marks\"),\n        types: mergeDeeply(parent, overrides, \"types\")\n    }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n    const override = overrides[key], parentVal = parent[key];\n    return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction PortableText({ value: input, components: componentOverrides, listNestingMode, onMissingComponent: missingComponentHandler = printWarning }) {\n    const handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(input) ? input : [\n        input\n    ], nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML), components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [\n        componentOverrides\n    ]), renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>getNodeRenderer(components, handleMissingComponent), [\n        components,\n        handleMissingComponent\n    ]), rendered = nested.map((node, index)=>renderNode({\n            node,\n            index,\n            isInline: !1,\n            renderNode\n        }));\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: rendered\n    });\n}\nconst getNodeRenderer = (components, handleMissingComponent)=>{\n    function renderNode(options) {\n        const { node, index, isInline } = options, key = node._key || `node-${index}`;\n        return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n    }\n    function hasCustomComponentForNode(node) {\n        return node._type in components.types;\n    }\n    function renderListItem(node, index, key) {\n        const tree = serializeBlock({\n            node,\n            index,\n            isInline: !1,\n            renderNode\n        }), renderer = components.listItem, Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n        if (Li === components.unknownListItem) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListItemStyleWarning(style), {\n                type: style,\n                nodeType: \"listItemStyle\"\n            });\n        }\n        let children = tree.children;\n        if (node.style && node.style !== \"normal\") {\n            const { listItem } = node, blockNode = _objectWithoutProperties(node, _excluded2);\n            children = renderNode({\n                node: blockNode,\n                index,\n                isInline: !1,\n                renderNode\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, {\n            value: node,\n            index,\n            isInline: !1,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderList(node, index, key) {\n        const children = node.children.map((child, childIndex)=>renderNode({\n                node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n                    _key: `li-${index}-${childIndex}`\n                }),\n                index: childIndex,\n                isInline: !1,\n                renderNode\n            })), component = components.list, List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n        if (List === components.unknownList) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListStyleWarning(style), {\n                nodeType: \"listStyle\",\n                type: style\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, {\n            value: node,\n            index,\n            isInline: !1,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderSpan(node, _index, key) {\n        const { markDef, markType, markKey } = node, Span = components.marks[markType] || components.unknownMark, children = node.children.map((child, childIndex)=>renderNode({\n                node: child,\n                index: childIndex,\n                isInline: !0,\n                renderNode\n            }));\n        return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n            nodeType: \"mark\",\n            type: markType\n        }), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Span, {\n            text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n            value: markDef,\n            markType,\n            markKey,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderBlock(node, index, key, isInline) {\n        const _serializeBlock = serializeBlock({\n            node,\n            index,\n            isInline,\n            renderNode\n        }), { _key } = _serializeBlock, props = _objectWithoutProperties(_serializeBlock, _excluded3), style = props.node.style || \"normal\", Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n        return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n            nodeType: \"blockStyle\",\n            type: style\n        }), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n            value: props.node,\n            renderNode\n        }), key);\n    }\n    function renderText(node, key) {\n        if (node.text === `\n`) {\n            const HardBreak = components.hardBreak;\n            return HardBreak ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n        }\n        return node.text;\n    }\n    function renderUnknownType(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        };\n        handleMissingComponent(unknownTypeWarning(node._type), {\n            nodeType: \"block\",\n            type: node._type\n        });\n        const UnknownType = components.unknownType;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n    }\n    function renderCustomBlock(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        }, Node = components.types[node._type];\n        return Node ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n    }\n    return renderNode;\n};\nfunction serializeBlock(options) {\n    const { node, index, isInline, renderNode } = options, children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map((child, i)=>renderNode({\n            node: child,\n            isInline: !0,\n            index: i,\n            renderNode\n        }));\n    return {\n        _key: node._key || `block-${index}`,\n        children,\n        index,\n        isInline,\n        node\n    };\n}\nfunction noop() {}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction isPortableTextSpan(node) {\n    return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark)=>typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n    return(// A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def)=>typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child)=>typeof child == \"object\" && \"_type\" in child));\n}\nfunction isPortableTextListItemBlock(block) {\n    return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n    return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n    return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n    return node._type === \"@text\";\n}\nconst knownDecorators = [\n    \"strong\",\n    \"em\",\n    \"code\",\n    \"underline\",\n    \"strike-through\"\n];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n    if (!isPortableTextSpan(span) || !span.marks) return [];\n    if (!span.marks.length) return [];\n    const marks = span.marks.slice(), occurences = {};\n    return marks.forEach((mark)=>{\n        occurences[mark] = 1;\n        for(let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++){\n            const sibling = blockChildren[siblingIndex];\n            if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;\n            else break;\n        }\n    }), marks.sort((markA, markB)=>sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n    const aOccurences = occurences[markA], bOccurences = occurences[markB];\n    if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n    const aKnownPos = knownDecorators.indexOf(markA), bKnownPos = knownDecorators.indexOf(markB);\n    return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n    var _a, _b;\n    const { children } = block, markDefs = (_a = block.markDefs) != null ? _a : [];\n    if (!children || !children.length) return [];\n    const sortedMarks = children.map(sortMarksByOccurences), rootNode = {\n        _type: \"@span\",\n        children: [],\n        markType: \"<unknown>\"\n    };\n    let nodeStack = [\n        rootNode\n    ];\n    for(let i = 0; i < children.length; i++){\n        const span = children[i];\n        if (!span) continue;\n        const marksNeeded = sortedMarks[i] || [];\n        let pos = 1;\n        if (nodeStack.length > 1) for(pos; pos < nodeStack.length; pos++){\n            const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\", index = marksNeeded.indexOf(mark);\n            if (index === -1) break;\n            marksNeeded.splice(index, 1);\n        }\n        nodeStack = nodeStack.slice(0, pos);\n        let currentNode = nodeStack[nodeStack.length - 1];\n        if (currentNode) {\n            for (const markKey of marksNeeded){\n                const markDef = markDefs == null ? void 0 : markDefs.find((def)=>def._key === markKey), markType = markDef ? markDef._type : markKey, node = {\n                    _type: \"@span\",\n                    _key: span._key,\n                    children: [],\n                    markDef,\n                    markType,\n                    markKey\n                };\n                currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n            }\n            if (isPortableTextSpan(span)) {\n                const lines = span.text.split(`\n`);\n                for(let line = lines.length; line-- > 1;)lines.splice(line, 0, `\n`);\n                currentNode.children = currentNode.children.concat(lines.map((text)=>({\n                        _type: \"@text\",\n                        text\n                    })));\n            } else currentNode.children = currentNode.children.concat(span);\n        }\n    }\n    return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n    const tree = [];\n    let currentList;\n    for(let i = 0; i < blocks.length; i++){\n        const block = blocks[i];\n        if (block) {\n            if (!isPortableTextListItemBlock(block)) {\n                tree.push(block), currentList = void 0;\n                continue;\n            }\n            if (!currentList) {\n                currentList = listFromBlock(block, i, mode), tree.push(currentList);\n                continue;\n            }\n            if (blockMatchesList(block, currentList)) {\n                currentList.children.push(block);\n                continue;\n            }\n            if ((block.level || 1) > currentList.level) {\n                const newList = listFromBlock(block, i, mode);\n                if (mode === \"html\") {\n                    const lastListItem = currentList.children[currentList.children.length - 1], newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n                        children: [\n                            ...lastListItem.children,\n                            newList\n                        ]\n                    });\n                    currentList.children[currentList.children.length - 1] = newLastChild;\n                } else currentList.children.push(newList);\n                currentList = newList;\n                continue;\n            }\n            if ((block.level || 1) < currentList.level) {\n                const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, block);\n                if (match) {\n                    currentList = match, currentList.children.push(block);\n                    continue;\n                }\n                currentList = listFromBlock(block, i, mode), tree.push(currentList);\n                continue;\n            }\n            if (block.listItem !== currentList.listItem) {\n                const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, {\n                    level: block.level || 1\n                });\n                if (match && match.listItem === block.listItem) {\n                    currentList = match, currentList.children.push(block);\n                    continue;\n                } else {\n                    currentList = listFromBlock(block, i, mode), tree.push(currentList);\n                    continue;\n                }\n            }\n            console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n        }\n    }\n    return tree;\n}\nfunction blockMatchesList(block, list) {\n    return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n    return {\n        _type: \"@list\",\n        _key: `${block._key || `${index}`}-parent`,\n        mode,\n        level: block.level || 1,\n        listItem: block.listItem,\n        children: [\n            block\n        ]\n    };\n}\nfunction findListMatching(rootNode, matching) {\n    const level = matching.level || 1, style = matching.listItem || \"normal\", filterOnType = typeof matching.listItem == \"string\";\n    if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n    if (!(\"children\" in rootNode)) return;\n    const node = rootNode.children[rootNode.children.length - 1];\n    return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n    let text = \"\";\n    return span.children.forEach((current)=>{\n        isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n    }), text;\n}\nconst leadingSpace = /^\\s/, trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n    const blocks = Array.isArray(block) ? block : [\n        block\n    ];\n    let text = \"\";\n    return blocks.forEach((current, index)=>{\n        if (!isPortableTextBlock(current)) return;\n        let pad = !1;\n        current.children.forEach((span)=>{\n            isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n        }), index !== blocks.length - 1 && (text += `\n\n`);\n    }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\", LIST_NEST_MODE_DIRECT = \"direct\";\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;